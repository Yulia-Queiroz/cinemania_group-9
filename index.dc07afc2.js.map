{"mappings":"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","sources":["src/index.js","src/js/weekly-trend.js","src/js/upcoming-this-month.js"],"sourcesContent":["import './js/header';\nimport './js/switch-color-bkg';\nimport './js/hero';\nimport './js/weekly-trend';\nimport './js/modal';\nimport './js/upcoming-this-month';\nimport './js/footer';\n","// import axios from 'axios';\n// const BASE_URL = \"https://api.themoviedb.org/3\";\n// const ENDPOINT = \"/trending/movie/week\";\n// const API_KEY = \"b90b64a7e05f9e36894001e36eb3b3c7\";\n// // const IMG_W400 = `/w400`;\n// const IMG_PATH = \"https://image.tmdb.org/t/p/w300\";\n\n// const list = document.querySelector('.js-list');\n// let page = 1;\n// let options = {\n//     root: null,\n//     rootMargin: \"400px\",\n//     threshold: 0,\n// };\n\n// let observer = new IntersectionObserver(handlerPagination, options);\n\n// function handlerPagination(entries, observer) {\n//     // console.log(entries);\n//     entries.forEach((entry) => {\n//         if (entry.isIntersecting) {\n//             page += 1;\n//             serviceMovie(page)\n//                 .then(data => {\n//                     list.insertAdjacentHTML('beforeend', createMarkup(data.results));\n//                     if (data.total_pages <= data.page) {\n//                         observer.unobserve(guard);\n//                     }\n//                 })\n//         }\n//     })\n// }\n\n//  function getTrending(page = 1) {\n\n//     return fetch(`${BASE_URL}${ENDPOINT}?api_key=${API_KEY}&page=${page}`)\n//         .then(resp => {\n//             if (!resp.ok) {\n//                 throw new Error(resp.statusText);\n//             }\n\n//             return resp.json()\n\n//         })\n// }\n// getTrending()\n//     .then(data => {\n//         list.insertAdjacentHTML('beforeend', createMarkup(data.results))\n//     })\n//     .catch(err => console.log(err))\n\n// function createMarkup(arr) {\n//     return arr.slice(0, 3).map(({ original_title, poster_path, release_date,  id, genre_ids}) =>\n//     `<li class='cards-list-item' id=\"${id}\">\n//        <img class='cards__list-img' src=\"https://image.tmdb.org/t/p/w500${poster_path}\" alt=\"${original_title}\"  loading=\"lazy\"\n//        width=\"395px\"\n//        height=\"354px\">\n//        <div class='weekly-trends__overlay'></div>\n//        <div class='cards__bloc-stars'>\n//      <h2 class='cards__list-title'>${original_title}</h2>\n//      <div class='cards__list-text'>${genre_ids} | ${release_date.slice(0, 4)}</div>\n// </div></li>`).join('')\n// }\n\nconst BASE_URL = 'https://api.themoviedb.org/3';\nconst ENDPOINT = '/trending/movie/week';\nconst API_KEY = 'b90b64a7e05f9e36894001e36eb3b3c7';\n// const IMG_W400 = /w400;\nconst IMG_PATH = 'https://image.tmdb.org/t/p/w300';\n\nconst list = document.querySelector('.js-list');\nlet page = 1;\nlet options = {\n  root: null,\n  rootMargin: '400px',\n  threshold: 0,\n};\n\nlet observer = new IntersectionObserver(handlerPagination, options);\n\nfunction handlerPagination(entries, observer) {\n  // console.log(entries);\n  entries.forEach(entry => {\n    if (entry.isIntersecting) {\n      page += 1;\n      serviceMovie(page).then(data => {\n        list.insertAdjacentHTML('beforeend', createMarkup(data.results));\n        if (data.total_pages <= data.page) {\n          observer.unobserve(guard);\n        }\n      });\n    }\n  });\n}\n\nasync function getTrending(page = 1) {\n  return fetch(`${BASE_URL}${ENDPOINT}?api_key=${API_KEY}&page=${page}`).then(\n    resp => {\n      if (!resp.ok) {\n        throw new Error(resp.statusText);\n      }\n\n      return resp.json();\n    }\n  );\n}\n\nasync function fetchGenres(movie) {\n  const response = await fetch(\n    'https://api.themoviedb.org/3/genre/movie/list?language=en&api_key=' +\n      API_KEY\n  );\n\n  const data = await response.json();\n  console.log(movie);\n  let genresArray = [];\n  const genres = data.genres;\n\n  for (const genre of genres) {\n    if (movie.genre_ids.includes(genre.id)) {\n      genresArray.push(genre.name);\n    }\n  }\n  return genresArray.slice(0, 2);\n}\n\nconst createMarkup = async arr => {\n  const genresPromises = arr.map(({ genre_ids }) => fetchGenres({ genre_ids }));\n  const genresArrays = await Promise.all(genresPromises);\n\n  return arr\n    .slice(0, 3)\n    .map(\n      (\n        { original_title, poster_path, vote_average, id, release_date },\n        index\n      ) => {\n        const movieGenres = genresArrays[index];\n        return `<li class='cards-list-item' data-id='${id}'>\n          <img class='cards__list-img' src=\"${IMG_PATH}${poster_path}\" alt=\"${original_title}\" loading=\"lazy\" \n          width=\"395px\" \n           height=\"574px\">\n          <div class='weekly-trends__overlay'></div>\n          <div class='cards__bloc-stars'>\n            <h2 class='cards__list-title'>${original_title}</h2>\n            <div class='cards__list-text'>${movieGenres.join(\n              ', '\n            )} | ${release_date.slice(0, 4)}</div>\n          </div>\n          <div class=\"weekly__rating\">\n            <div class=\"weekly__stars\">${getStars(vote_average)}</div>\n          </div>\n        </li>`;\n      }\n    )\n    .join('');\n};\n\nfunction getStars(vote_average) {\n  // ----------------------------------------------------------\n  const fullStar = '★';\n  const emptyStar = '☆';\n  const roundedRating = Math.round(vote_average);\n  let stars = '';\n  for (let i = 0; i < 5; i++) {\n    if (i < roundedRating / 2) {\n      stars += fullStar;\n    } else {\n      stars += emptyStar;\n    }\n  }\n\n  return stars;\n}\n\nasync function displayMovieRating(rating) {\n  const roundedRating = Math.round(rating);\n  const starsElement = document.querySelector('.stars');\n  const ratingValueElement = document.querySelector('.rating-value');\n\n  let stars = '';\n  for (let i = 0; i < 5; i++) {\n    if (i < roundedRating / 2) {\n      stars += '★';\n    } else {\n      stars += '☆';\n    }\n  }\n\n  starsElement.textContent = stars;\n  ratingValueElement.textContent = `Rating: ${rating.toFixed(1)}`;\n}\n\ngetTrending()\n  .then(async data => {\n    list.insertAdjacentHTML('beforeend', await createMarkup(data.results));\n  })\n  .catch(err => console.log(err));\n\n// -------------------------------------\n","import axios from 'axios';\nimport { KEY } from './API/api-key';\n\nconst sectionTitle = document.querySelector('.upcoming-section-title');\n\nlet movieData;\nlet addBtn;\n\nasync function fetchUpcomingMovies() {\n  const response = await axios.get(\n    'https://api.themoviedb.org/3/movie/upcoming?language=en-US',\n    {\n      params: {\n        api_key: KEY,\n      },\n    }\n  );\n  const data = response.data;\n  const randomNumber = Math.floor(Math.random() * data.results.length);\n  const movie = data.results[randomNumber];\n\n  return movie;\n}\n\nfetchUpcomingMovies()\n  .then(movie => {\n    movieData = movie;\n    createMarkup(movie);\n  })\n  .catch(() => {\n    if (!movieData) {\n      return notFoundMarkup();\n    }\n    errorMarkup();\n  });\n\nasync function fetchGenres(movie) {\n  const response = await axios.get(\n    'https://api.themoviedb.org/3/genre/movie/list?language=en',\n    {\n      params: {\n        api_key: KEY,\n      },\n    }\n  );\n\n  let genresArray = [];\n  const genres = response.data.genres;\n\n  for (const genre of genres) {\n    if (movie.genre_ids.includes(genre.id)) {\n      genresArray.push(genre.name);\n    }\n  }\n  return genresArray;\n}\n\nasync function createMarkup(movie) {\n  const genresResponse = await fetchGenres(movie).then(response => {\n    return response;\n  });\n  const genresList = genresResponse\n    .map((genre, index) => {\n      if (index === 0) {\n        return genre.charAt(0).toUpperCase() + genre.slice(1);\n      } else {\n        return genre.toLowerCase();\n      }\n    })\n    .join(', ');\n\n  const dateParts = movie.release_date.split('-');\n  const dateFormat = `${dateParts[2]}.${dateParts[1]}.${dateParts[0]}`;\n  const posterUrl = getImageUrl(movie);\n\n  const markup = `<div class=\"upcoming-desktop-container\"><img \n  class=\"upcoming-section-img\" \n  src=\"${posterUrl}\" \n  alt=\"${movie.title}\" \n/> \n<div class=\"upcoming-desktop-flex\"> \n  <h3 class=\"upcoming-movie-title\">${movie.title}</h3> \n  <div class=\"upcoming-flex-container\"> \n    <div class=\"upcoming-tablet-flex\"> \n      <div class=\"upcoming-data-flex\"> \n        <p class=\"info-key\">Release date</p> \n        <p class=\"info-value info-value-date\">${dateFormat}</p> \n      </div> \n      <div class=\"upcoming-data-flex\"> \n        <p class=\"info-key\">Vote / Votes</p> \n        <p class=\"info-value\"> \n          <span class=\"info-value-vote\"> ${movie.vote_average}</span> / \n          <span class=\"info-value-vote\">${movie.vote_count}</span> \n        </p> \n      </div> \n    </div> \n    <div class=\"upcoming-tablet-flex\"> \n      <div class=\"upcoming-data-flex\"> \n        <p class=\"info-key\">Popularity</p> \n        <p class=\"info-value\">${movie.popularity.toFixed(1)}</p> \n      </div> \n      <div class=\"upcoming-data-flex\"> \n        <p class=\"info-key\">Genre</p> \n        <p class=\"info-value\">${genresList}</p> \n      </div> \n    </div> \n  </div> \n \n  <h4 class=\"about-title\">About</h4> \n  <p class=\"about-description\">${movie.overview}</p> \n  <button class=\"library-button upcoming-button\">Add to my library</button> \n</div></div> \n        `;\n  sectionTitle.insertAdjacentHTML('afterend', markup);\n\n  addBtn = document.querySelector('.library-button');\n  if (isMovieStored(movie.id)) {\n    addBtn.textContent = 'Remove from my library';\n  }\n  addBtn.addEventListener('click', onBtnClick);\n}\n\nfunction getImageUrl(movie) {\n  const baseImageUrl = 'https://image.tmdb.org/t/p/';\n  const deviceWidth = window.innerWidth;\n\n  if (deviceWidth >= 768) {\n    return `${baseImageUrl}w1280/${movie.backdrop_path}`;\n  } else {\n    return `${baseImageUrl}w500/${movie.poster_path}`;\n  }\n}\n\nfunction notFoundMarkup() {\n  const markup =\n    '<div class=\"error-message\"><p>Oops...</p><p>We are very sorry!</p><p>There are no upcoming movies at the moment.</p></div> ';\n  sectionTitle.insertAdjacentHTML('afterend', markup);\n}\n\nfunction errorMarkup() {\n  const markup =\n    '<div class=\"error-message\"><p>Oops...</p><p>We are very sorry!</p><p>Something went wrong.</p></div>';\n  sectionTitle.insertAdjacentHTML('afterend', markup);\n}\n\nexport function onBtnClick() {\n  const storedMovies = JSON.parse(localStorage.getItem('librariesKey')) || [];\n  const movieId = movieData.id;\n\n  if (isMovieStored(movieId)) {\n    const index = storedMovies.findIndex(movie => movie.id === movieId);\n    storedMovies.splice(index, 1);\n    localStorage.setItem('librariesKey', JSON.stringify(storedMovies));\n\n    addBtn.textContent = 'Add to my library';\n  } else {\n    storedMovies.push(movieData);\n    localStorage.setItem('librariesKey', JSON.stringify(storedMovies));\n\n    addBtn.textContent = 'Remove from my library';\n  }\n}\n\nexport function isMovieStored(movieId) {\n  const storedMovies = JSON.parse(localStorage.getItem('librariesKey')) || [];\n  return storedMovies.some(movie => movie.id === movieId);\n}\n"],"names":["parcelRequire","$1c26d025b3f2124b$var$list","document","querySelector","$1c26d025b3f2124b$var$page","IntersectionObserver","entries","observer1","forEach","entry","isIntersecting","serviceMovie","then","data","insertAdjacentHTML","$1c26d025b3f2124b$var$createMarkup","results","total_pages","page","unobserve","guard","root","rootMargin","threshold","async","arr","genresPromises","map","genre_ids","movie","response","fetch","json","console","log","genresArray","genres","genre","includes","id","push","name","slice","$1c26d025b3f2124b$var$fetchGenres","genresArrays","Promise","all","original_title","poster_path","vote_average","release_date","index","join","fullStar","emptyStar","roundedRating","Math","round","stars","i","$1c26d025b3f2124b$var$getStars","page1","resp","ok","Error","statusText","$1c26d025b3f2124b$var$getTrending","catch","err","$2shzp","$85371336fd858ba9$var$sectionTitle","$85371336fd858ba9$var$movieData","$85371336fd858ba9$var$addBtn","$85371336fd858ba9$export$85806c12118d2fc","storedMovies","JSON","parse","localStorage","getItem","movieId","$85371336fd858ba9$export$dfa105a8921b3377","findIndex","splice","setItem","stringify","textContent","some","default","get","params","api_key","$9fyS7","KEY","randomNumber","floor","random","length","$85371336fd858ba9$var$fetchUpcomingMovies","genresList","$85371336fd858ba9$var$fetchGenres","charAt","toUpperCase","toLowerCase","dateParts","split","dateFormat","markup","baseImageUrl","window","innerWidth","backdrop_path","$85371336fd858ba9$var$getImageUrl","title","vote_count","popularity","toFixed","overview","addEventListener","$85371336fd858ba9$var$createMarkup","$85371336fd858ba9$var$notFoundMarkup","$85371336fd858ba9$var$errorMarkup"],"version":3,"file":"index.dc07afc2.js.map"}